from flask import Flask, request, jsonify
import requests
from config import API_BOT_TOKEN, API_UKRAINE_ALARM_KEY, WEBHOOK_URL, SUBSCRIPTION_URL
import db
import os
from operations import *
import threading

app = Flask(__name__)

webhook_url = "/webhook"


def subscribe_to_webhook():
    payload = {
        "webHookUrl": WEBHOOK_URL
    }
    headers = {
        "Content-Type": "application/json",
        "accept": "text/plain",
        "Authorization": API_UKRAINE_ALARM_KEY
    }
    response = requests.post(SUBSCRIPTION_URL, json=payload, headers=headers)
    print("Subscription Status Code:", response.status_code)
    if response.status_code == 200:
        print("Successfully subscribed to the webhook")
    else:
        print("Failed to subscribe to the webhook")


@app.route(webhook_url, methods=['POST'])
def webhook_handler():
    try:
        data = request.get_data().decode("utf-8")  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –≤–µ–±—Ö—É–∫–∞ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
        data_dict = json.loads(data)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Å–ª–æ–≤–∞—Ä—å
        print("Received webhook data:", data_dict)
        send_alerts(data_dict)
        return jsonify({"status": "success"})
    except Exception as e:
        app.logger.error(f"Error processing webhook data: {str(e)}")
        return jsonify({"status": "error"})


def send_alerts(received_alert):
    users = db.get_all_users()
    time_from_alert = convert_time_from_alert(received_alert['createdAt'])
    threads = []

    for user in users:

        time_zone = time_zone_to_time(user['time_zone'])
        if user['notifications']:
            if time_zone[0] <= time(time_from_alert[0], time_from_alert[1]) <= time_zone[1]:
                # –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫ –ø–æ—Ç–æ–∫–æ–≤
                thread = threading.Thread(target=send_user_alert, args=(received_alert, user))
                threads.append(thread)
                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫
                thread.start()

    # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
    for thread in threads:
        thread.join()


def send_user_alert(received_alert, user):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–ª–∞–≤–Ω–æ–º —Ä–µ–≥–∏–æ–Ω–µ
    send_main_region_alert(received_alert, user)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–º —Ä–µ–≥–∏–æ–Ω–µ
    send_additional_region_alert(received_alert, user)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–ª–∏–∑–∫–æ–º —Ä–µ–≥–∏–æ–Ω–µ
    send_alert_from_near_region(received_alert, user)


def send_main_region_alert(received_alert, user):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    user_id = user['telegram_id']
    if user['region_id'] == str(received_alert['regionId']):
        text = generate_alert_text(received_alert, is_main_region=True)
        send_message(user_id, text)


def send_additional_region_alert(received_alert, user):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    user_id = user['telegram_id']
    if user['additional_region'] == str(received_alert['regionId']):
        text = generate_alert_text(received_alert, is_main_region=False)
        send_message(user_id, text)


def send_alert_from_near_region(received_alert, user):
    # –ü–æ–ª—É—á–∞–µ–º –±–ª–∏–∑–ª–µ–∂–∞—â–∏–µ —Ä–µ–≥–∏–æ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    nearby_regions = found_near_region(user['region_id'])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ä–µ–≥–∏–æ–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ä–µ–¥–∏ –±–ª–∏–∑–ª–µ–∂–∞—â–∏—Ö
    if int(received_alert['regionId']) in nearby_regions:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        user_id = user['telegram_id']
        text = generate_alert_text(received_alert, is_main_region=False, is_nearby=True)
        send_message(user_id, text)


def change_gender(region_name):
    if region_name is not None:
        if region_name.endswith('—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å'):
            return region_name.replace('—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', '—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ')
        elif region_name.endswith('–∑—å–∫–∞ –æ–±–ª–∞—Å—Ç—å'):
            return region_name.replace('–∑—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', '–∑—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ')
        else:
            return region_name


def generate_alert_text(received_alert, is_main_region=False, is_nearby=False):
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∏ —Å—Ç–∞—Ç—É—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if alert_status(received_alert['status'].lower()):
        prefix = f"üî¥ –£–≤–∞–≥–∞! {(define_alert_type(str(received_alert['alarmType'])))} üî¥"
    else:
        prefix = "üü¢ –í—ñ–¥–±—ñ–π —Ç—Ä–∏–≤–æ–≥–∏ üü¢"

    if is_nearby:
        region_name = get_region_name(str(received_alert['regionId']))
        formated_region_name = change_gender(region_name)
        return f"{prefix}\nüåç –í {formated_region_name}, –±—ñ–ª—è –≤–∞—Å!"
    elif is_main_region:
        return f"{prefix}\nüåç –í –≤–∞—à—ñ–π –æ–±–ª–∞—Å—Ç—ñ!"
    else:
        return f"{prefix}\nüåç –í –¥–æ–¥–∞—Ç–∫–æ–≤—ñ–π –æ–±–ª–∞—Å—Ç—ñ!"


def send_message(user_id, text):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram API
    bot_url = f'https://api.telegram.org/bot{API_BOT_TOKEN}'
    url = f'{bot_url}/sendMessage?chat_id={user_id}&text={text}'
    response = requests.get(url)
    print(f'Status code of sending message to user: {response.status_code}')


if __name__ == "__main__":
    from waitress import serve

    subscribe_to_webhook()
    serve(app, host='0.0.0.0', port=int(os.getenv("PORT", default=5000)))
